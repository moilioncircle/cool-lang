package com.leon.cool.lang;

import com.leon.cool.lang.util.FileUtil;
import net.jcip.annotations.NotThreadSafe;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.SystemOutRule;

import static org.junit.Assert.assertEquals;

/**
 * Copyright leon
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author leon on 15-11-1
 */
@NotThreadSafe
public class TestLam {
    @Rule
    public final SystemOutRule systemOutRule = new SystemOutRule().enableLog();

    @Test
    public void test() {
        String str = FileUtil.readJarFile("lam.cl");
        Bootstrap.run(str);
        assertEquals("\\x.x\n" +
                "\\x.\\y.x\n" +
                "\\x.\\y.\\z.((((x)@(z)))@(((y)@(z))))\n" +
                "beta-reduce: ((((((\\x.\\y.\\z.((((x)@(z)))@(((y)@(z)))))@(\\x.\\y.x)))@(\\x.x)))@(\\x.x)) =>\n" +
                "((((\\y.\\z.((((\\x.\\y.x)@(z)))@(((y)@(z)))))@(\\x.x)))@(\\x.x)) =>\n" +
                "((\\z.((((\\x.\\y.x)@(z)))@(((\\x.x)@(z)))))@(\\x.x)) =>\n" +
                "((((\\x.\\y.x)@(\\x.x)))@(((\\x.x)@(\\x.x)))) =>\n" +
                "((\\y.\\x.x)@(((\\x.x)@(\\x.x)))) =>\n" +
                "\\x.x\n" +
                "beta-reduce: ((((\\x.\\y.x)@(\\x.x)))@(\\x.x)) =>\n" +
                "((\\y.\\x.x)@(\\x.x)) =>\n" +
                "\\x.x\n" +
                "Generating code for ((\\x.x)@(\\x.x))\n" +
                "------------------cut here------------------\n" +
                "(*Generated by lam.cl (Jeff Foster, March 2000)*)\n" +
                "class EvalObject inherits IO {\n" +
                "  eval() : EvalObject { { abort(); self; } };\n" +
                "};\n" +
                "class Closure inherits EvalObject {\n" +
                "  parent : Closure;\n" +
                "  x : EvalObject;\n" +
                "  get_parent() : Closure { parent };\n" +
                "  get_x() : EvalObject { x };\n" +
                "  init(p : Closure) : Closure {{ parent <- p; self; }};\n" +
                "  apply(y : EvalObject) : EvalObject { { abort(); self; } };\n" +
                "};\n" +
                "class Main {\n" +
                "  main() : EvalObject {\n" +
                "(let x : EvalObject <- ((new Closure0).init(new Closure)),\n" +
                "     y : EvalObject <- ((new Closure1).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac)\n" +
                "};\n" +
                "};\n" +
                "class Closure1 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 1\\n\");\n" +
                "      x <- y;\n" +
                "get_x();}};\n" +
                "};\n" +
                "class Closure0 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 0\\n\");\n" +
                "      x <- y;\n" +
                "get_x();}};\n" +
                "};\n" +
                "\n" +
                "------------------cut here------------------\n" +
                "Generating code for ((((((\\x.\\y.\\z.((((x)@(z)))@(((y)@(z)))))@(\\x.\\y.x)))@(\\x.x)))@(\\x.x))\n" +
                "------------------cut here------------------\n" +
                "(*Generated by lam.cl (Jeff Foster, March 2000)*)\n" +
                "class EvalObject inherits IO {\n" +
                "  eval() : EvalObject { { abort(); self; } };\n" +
                "};\n" +
                "class Closure inherits EvalObject {\n" +
                "  parent : Closure;\n" +
                "  x : EvalObject;\n" +
                "  get_parent() : Closure { parent };\n" +
                "  get_x() : EvalObject { x };\n" +
                "  init(p : Closure) : Closure {{ parent <- p; self; }};\n" +
                "  apply(y : EvalObject) : EvalObject { { abort(); self; } };\n" +
                "};\n" +
                "class Main {\n" +
                "  main() : EvalObject {\n" +
                "(let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- ((new Closure0).init(new Closure)),\n" +
                "     y : EvalObject <- ((new Closure1).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- ((new Closure2).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- ((new Closure3).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac)\n" +
                "};\n" +
                "};\n" +
                "class Closure3 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 3\\n\");\n" +
                "      x <- y;\n" +
                "get_x();}};\n" +
                "};\n" +
                "class Closure2 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 2\\n\");\n" +
                "      x <- y;\n" +
                "get_x();}};\n" +
                "};\n" +
                "class Closure1 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 1\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure4).init(self));}};\n" +
                "};\n" +
                "class Closure4 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 4\\n\");\n" +
                "      x <- y;\n" +
                "get_parent().get_x();}};\n" +
                "};\n" +
                "class Closure0 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 0\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure5).init(self));}};\n" +
                "};\n" +
                "class Closure5 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 5\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure6).init(self));}};\n" +
                "};\n" +
                "class Closure6 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 6\\n\");\n" +
                "      x <- y;\n" +
                "(let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac);}};\n" +
                "};\n" +
                "\n" +
                "------------------cut here------------------\n" +
                "Generating code for ((((((((((((((((\\x.x)@(\\x.\\y.x)))@(\\x.\\y.\\z.((((x)@(z)))@(((y)@(z)))))))@(\\x.\\y.\\z.((((x)@(z)))@(((y)@(z)))))))@(\\x.\\y.x)))@(\\x.\\y.\\z.((((x)@(z)))@(((y)@(z)))))))@(\\x.x)))@(\\x.\\y.x)))@(\\x.x))\n" +
                "------------------cut here------------------\n" +
                "(*Generated by lam.cl (Jeff Foster, March 2000)*)\n" +
                "class EvalObject inherits IO {\n" +
                "  eval() : EvalObject { { abort(); self; } };\n" +
                "};\n" +
                "class Closure inherits EvalObject {\n" +
                "  parent : Closure;\n" +
                "  x : EvalObject;\n" +
                "  get_parent() : Closure { parent };\n" +
                "  get_x() : EvalObject { x };\n" +
                "  init(p : Closure) : Closure {{ parent <- p; self; }};\n" +
                "  apply(y : EvalObject) : EvalObject { { abort(); self; } };\n" +
                "};\n" +
                "class Main {\n" +
                "  main() : EvalObject {\n" +
                "(let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- ((new Closure0).init(new Closure)),\n" +
                "     y : EvalObject <- ((new Closure1).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- ((new Closure2).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- ((new Closure3).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- ((new Closure4).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- ((new Closure5).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- ((new Closure6).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- ((new Closure7).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- ((new Closure8).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac)\n" +
                "};\n" +
                "};\n" +
                "class Closure8 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 8\\n\");\n" +
                "      x <- y;\n" +
                "get_x();}};\n" +
                "};\n" +
                "class Closure7 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 7\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure9).init(self));}};\n" +
                "};\n" +
                "class Closure9 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 9\\n\");\n" +
                "      x <- y;\n" +
                "get_parent().get_x();}};\n" +
                "};\n" +
                "class Closure6 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 6\\n\");\n" +
                "      x <- y;\n" +
                "get_x();}};\n" +
                "};\n" +
                "class Closure5 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 5\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure10).init(self));}};\n" +
                "};\n" +
                "class Closure10 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 10\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure11).init(self));}};\n" +
                "};\n" +
                "class Closure11 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 11\\n\");\n" +
                "      x <- y;\n" +
                "(let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac);}};\n" +
                "};\n" +
                "class Closure4 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 4\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure12).init(self));}};\n" +
                "};\n" +
                "class Closure12 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 12\\n\");\n" +
                "      x <- y;\n" +
                "get_parent().get_x();}};\n" +
                "};\n" +
                "class Closure3 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 3\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure13).init(self));}};\n" +
                "};\n" +
                "class Closure13 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 13\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure14).init(self));}};\n" +
                "};\n" +
                "class Closure14 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 14\\n\");\n" +
                "      x <- y;\n" +
                "(let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac);}};\n" +
                "};\n" +
                "class Closure2 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 2\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure15).init(self));}};\n" +
                "};\n" +
                "class Closure15 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 15\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure16).init(self));}};\n" +
                "};\n" +
                "class Closure16 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 16\\n\");\n" +
                "      x <- y;\n" +
                "(let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac);}};\n" +
                "};\n" +
                "class Closure1 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 1\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure17).init(self));}};\n" +
                "};\n" +
                "class Closure17 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 17\\n\");\n" +
                "      x <- y;\n" +
                "get_parent().get_x();}};\n" +
                "};\n" +
                "class Closure0 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 0\\n\");\n" +
                "      x <- y;\n" +
                "get_x();}};\n" +
                "};\n" +
                "\n" +
                "------------------cut here------------------\n" +
                "Generating code for ((((\\x.x)@(((\\x.\\y.x)@(\\x.\\y.\\z.((((x)@(z)))@(((y)@(z)))))))))@(((\\x.\\y.x)@(((\\x.\\y.\\z.((((x)@(z)))@(((y)@(z)))))@(\\x.\\y.\\z.((((x)@(z)))@(((y)@(z))))))))))\n" +
                "------------------cut here------------------\n" +
                "(*Generated by lam.cl (Jeff Foster, March 2000)*)\n" +
                "class EvalObject inherits IO {\n" +
                "  eval() : EvalObject { { abort(); self; } };\n" +
                "};\n" +
                "class Closure inherits EvalObject {\n" +
                "  parent : Closure;\n" +
                "  x : EvalObject;\n" +
                "  get_parent() : Closure { parent };\n" +
                "  get_x() : EvalObject { x };\n" +
                "  init(p : Closure) : Closure {{ parent <- p; self; }};\n" +
                "  apply(y : EvalObject) : EvalObject { { abort(); self; } };\n" +
                "};\n" +
                "class Main {\n" +
                "  main() : EvalObject {\n" +
                "(let x : EvalObject <- (let x : EvalObject <- ((new Closure0).init(new Closure)),\n" +
                "     y : EvalObject <- (let x : EvalObject <- ((new Closure1).init(new Closure)),\n" +
                "     y : EvalObject <- ((new Closure2).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- (let x : EvalObject <- ((new Closure3).init(new Closure)),\n" +
                "     y : EvalObject <- (let x : EvalObject <- ((new Closure4).init(new Closure)),\n" +
                "     y : EvalObject <- ((new Closure5).init(new Closure)) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac)\n" +
                "};\n" +
                "};\n" +
                "class Closure5 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 5\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure6).init(self));}};\n" +
                "};\n" +
                "class Closure6 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 6\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure7).init(self));}};\n" +
                "};\n" +
                "class Closure7 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 7\\n\");\n" +
                "      x <- y;\n" +
                "(let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac);}};\n" +
                "};\n" +
                "class Closure4 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 4\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure8).init(self));}};\n" +
                "};\n" +
                "class Closure8 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 8\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure9).init(self));}};\n" +
                "};\n" +
                "class Closure9 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 9\\n\");\n" +
                "      x <- y;\n" +
                "(let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac);}};\n" +
                "};\n" +
                "class Closure3 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 3\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure10).init(self));}};\n" +
                "};\n" +
                "class Closure10 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 10\\n\");\n" +
                "      x <- y;\n" +
                "get_parent().get_x();}};\n" +
                "};\n" +
                "class Closure2 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 2\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure11).init(self));}};\n" +
                "};\n" +
                "class Closure11 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 11\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure12).init(self));}};\n" +
                "};\n" +
                "class Closure12 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 12\\n\");\n" +
                "      x <- y;\n" +
                "(let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac),\n" +
                "     y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),\n" +
                "     y : EvalObject <- get_x() in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac) in\n" +
                "  case x of\n" +
                "    c : Closure => c.apply(y);\n" +
                "    o : Object => { abort(); new EvalObject; };\n" +
                "  esac);}};\n" +
                "};\n" +
                "class Closure1 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 1\\n\");\n" +
                "      x <- y;\n" +
                "((new Closure13).init(self));}};\n" +
                "};\n" +
                "class Closure13 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 13\\n\");\n" +
                "      x <- y;\n" +
                "get_parent().get_x();}};\n" +
                "};\n" +
                "class Closure0 inherits Closure {\n" +
                "  apply(y : EvalObject) : EvalObject {\n" +
                "    { out_string(\"Applying closure 0\\n\");\n" +
                "      x <- y;\n" +
                "get_x();}};\n" +
                "};\n" +
                "\n" +
                "------------------cut here------------------\n", systemOutRule.getLog());
    }
}
